#ifndef PNK_NOMAKE_POSIX_INCLUDE
#define PNK_NOMAKE_POSIX_INCLUDE

#include <stdio.h>
#include <stdbool.h>

#include <time.h>
#include <assert.h>
#include <string.h>

#include <unistd.h>
#include <sys/stat.h>

static inline
void
pnk_nomake_internal_print_last_error(
    char const*                         const file,
    int                                 const line,
    char const*                         const func,
    PnkNomakeInternalPrintLastErrorArgs const args)
{
    char const* const ERROR_FORMAT_BASE = "%s:%d: error in %s: %s\n";
    char const* const ERROR_FORMAT_NOTE = "%s:%d: error in %s: %s (note: %s)\n";

    char buffer[PNK_NOMAKE_ERROR_STRING_BUFFER_SIZE];
    assert(strerror_r(errno, buffer, sizeof buffer) == 0);

    if (args.note == NULL)
        fprintf(stderr, ERROR_FORMAT_BASE, file, line, func, buffer);
    else
        fprintf(stderr, ERROR_FORMAT_NOTE, file, line, func, buffer, args.note);
}

static inline
void
pnk_nomake_internal_spawn_process(
    char*                               const cmd,
    PnkNomakeInternalPrintLastErrorArgs const args)
{
    assert(false && "Not implemented yet.");
}

////////////////////////////////////////////////////////////////////////////////
//                                  File API                                  //
////////////////////////////////////////////////////////////////////////////////
static inline
void
pnk_nomake_internal_file_append_exe(
    char*       const buffer,
    ptrdiff_t   const length,
    char const* const path)
{
    ptrdiff_t const path_size = strlen(path);

    assert(path_size < length && "Insufficient buffer size.");
    strcpy(buffer, path);
}

static inline
time_t
pnk_nomake_internal_file_get_last_write_time(
        char const* const path)
{
    struct stat data;

    if (stat(path, &data)) return data.st_mtime;
    else                   return 0;
}

static inline
bool
pnk_nomake_internal_file_delete(
    char const* path)
{
    return !unlink(path);
}

static inline
bool
pnk_nomake_internal_file_rename(
    char const* const restrict old_name,
    char const* const restrict new_name)
{
    return !rename(old_name, new_name);
}

static inline
bool
pnk_nomake_internal_file_directory_exists(
    char const* const path)
{
    struct stat data;
    return stat(path, &data) == 0 && S_ISDIR(data.st_mode);
}

static inline
bool
pnk_nomake_internal_file_directory_create(
    char const* const name)
{
    // FIXME: Wrong modes?
    return !mkdir(name, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
}
#endif/*PNK_NOMAKE_POSIX_INCLUDE*/
